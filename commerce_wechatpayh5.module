<?php

/**
 * Implements hook_menu().
 */
function commerce_wechatpayh5_menu() {
    $items['admin/config/commerce_wechatpayh5/config'] = array(
        'title' => 'Wechat Pay H5',
        'description' => 'Configuration module page',
        'page callback'    => 'drupal_get_form',
        'page arguments'   => ['commerce_wechatpayh5_settings_form'],
        'access callback' => TRUE,
        'access arguments' => ['access adminstration page'],
        'type' => MENU_CALLBACK,
    );
    $items['commerce_wechatpayh5/%/notify-payh5'] = array(
        'title' => 'notify callback pay',
        'page callback' => 'commerce_wechatpayh5_notify',
        'page arguments' => ['orderId'],
        'access callback' => TRUE,
        'type' => MENU_CALLBACK,
    );
    $items['commerce_wechatpayh5/wechatpay-status'] = array(
        'title' => 'Wechat Payment Status',
        'page callback' => 'commerce_wechatpayh5_status',
        'access arguments' => array('access content'),
        'type' => MENU_CALLBACK,
    );
    $items['commerce_wechatpayh5/order-complete'] = array(
        'title' => t('Order Complete'),
        'page callback' => 'commerce_wechatpayh5_order_complete',
        'access arguments' => array('access content'),
        'type' => MENU_CALLBACK,
    );
    
    return $items;
}

/**
 * Implements hook_commerce_payment_method_info().
 */
function commerce_wechatpayh5_commerce_payment_method_info() {
    $payment_methods = array();
  
    $payment_methods['wechatpayh5_unifiedOrder'] = array(
        'base' => 'commerce_wechatpayh5',
        'title' => t('Wechat H5'),
        'short_title' => t('Unified Order'),
        'description' => t('Unified Order, Wechat Pay H5 API'),
        'terminal' => FALSE,
        'offsite' => TRUE,
        'offsite_autoredirect' => TRUE,
    );
    
    return $payment_methods;
}

function commerce_wechatpayh5_redirect_form($form, &$form_state, $order, $payment_method) {
    $settings = array(
        // Return to the previous page when payment is canceled
        'cancel_return' => url('checkout/' . $order->order_number . '/review', array('absolute' => TRUE)),
    
        // Return to the payment redirect page for processing successful payments
        'return' => url('checkout/' . $order->order_number . '/complete', array('absolute' => TRUE)),
      );
    
    return commerce_wechatpayh5_order_form($form, $form_state, $order, $payment_method['settings'] + $settings);
}

function commerce_wechatpayh5_order_form($form, &$form_state, $order, $settings) {
    $url = (isset($_SERVER['HTTPS']) ? "https" : "http") . "://$_SERVER[HTTP_HOST]"."/";
    $form['#action'] = $url.'commerce_wechatpayh5/'.$order->order_number.'/notify-payh5';
    // $form['#action'] = commerce_wechatpayh5_unifiedOrder($order->order_number, $order->commerce_order_total['und'][0]['amount'], 'This is a test payement');
    
    $form['submit'] = array(
        '#type' => 'submit',
        '#value' => t('Proceed to Wechat'),
    );
    
    return $form;
}

function  commerce_wechatpayh5_submit_form($payment_method, $pane_values, $checkout_pane, $order) {

}

function commerce_wechatpayh5_form_commerce_checkout_form_alter(&$form, &$form_state) {

}

function commerce_wechatpayh5_process_notify() {

}

/**
 * Payment method callback: settings form.
 */
function commerce_wechatpayh5_settings_form($form, &$form_state) {
    $url = (isset($_SERVER['HTTPS']) ? "https" : "http") . "://$_SERVER[HTTP_HOST]"."/";

    $form['APPID'] = array(
        '#type' => 'textfield',
        '#title' => t('APPID'),
        '#description' => t('Write your <strong>APPID</strong>'),
        '#default_value' => variable_get('APPID'),
        '#required' => TRUE,
    );
    $form['MCHID'] = array(
        '#type' => 'textfield',
        '#title' => t('MCHID'),
        '#description' => t('Write your <strong>MCHID</strong>'),
        '#default_value' => variable_get('MCHID'),
        '#required' => TRUE,
    );
    $form['KEY'] = array(
        '#type' => 'textfield',
        '#title' => t('KEY'),
        '#description' => t('Write your <strong>KEY</strong>'),
        '#default_value' => variable_get('KEY'),
        '#required' => TRUE,
    );
    $form['APPSECRET'] = array(
        '#type' => 'textfield',
        '#title' => t('APPSECRET'),
        '#description' => t('Write your <strong>APPSECRET</strong>'),
        '#default_value' => variable_get('APPSECRET'),
        '#required' => TRUE,
    );
  
  return system_settings_form($form);
}

function commerce_wechatpayh5_notify($value) {
    global $base_url;
    $id = arg(1);
    $order = commerce_order_load($id);
    $url = commerce_wechatpayh5_unifiedOrder($order->order_number, $order->commerce_order_total['und'][0]['amount'], 'This is a test payement');
    
    $path = drupal_get_path('module', 'commerce_wechatpayh5');
    drupal_add_js($path . '/js/commerce_wechatpayh5.js');
    // sleep(10);

    echo '<script src="'.$base_url.'/sites/all/modules/contrib/jquery_update/replace/jquery/1.10/jquery.min.js"></script>';
    echo '<script src="'.$base_url.'/'.$path.'/js/commerce_wechatpayh5.js"></script>';
    echo '<body>';
    echo '<a href="'.$url.'" id="openpay" style="color:white">';
    echo '<div style="height: 100px; width: 250px; background-color: #00c80f; text-align: center; vertical-align: middle;">';
    echo '<p style="font-size: 40px"> PAY </p>';
    echo '</div>';
    echo '</a>';
    echo '<form id="wechatForm" method="POST" action="'.$base_url.'/commerce_wechatpayh5/order-complete">';
    echo '<input type="hidden" value="'.$order->order_number.'" id="outtradeno" name ="out_trade_no"/>';
    // echo '<input type="hidden" value="'.$order->order_id.'" name ="orderid" id="orderid"/>';
    echo '<input type="hidden" value="true" name ="orderstatus" id="status"/>';
    echo '<input type="submit" value="Continue" id="wechatsubmit" style="display: none;"/>';
    echo '</form>';
    echo '</body>';
    // drupal_goto($url);
}

function commerce_wechatpayh5_status() {
    $out_trade_no = $_POST['outtradeno'];
    $result = commerce_wechatpayh5_orderQuery($out_trade_no);
    if(isset($result['trade_state'])){
        print $result['trade_state'];
    } else {
        print "false";
    }
}

function commerce_wechatpayh5_order_complete() {
    $order_id = $_POST['orderid'];
    drupal_goto('checkout/'.$order_id.'/complete');
    echo 'PAID';
}

/*
** Weixin pay functions
*/
function commerce_wechatpayh5_unifiedOrder($out_trade_no, $total_fee, $body) {
    require_once "lib/WxPay.Api.php";
    $wxparams = new WxPayUnifiedOrder();

    $wxparams->SetTrade_type('MWEB');
    $wxparams->SetBody($body);
    $wxparams->SetOut_trade_no($out_trade_no);
    // $wxparams->SetTotal_fee($total_fee);
    $wxparams->SetTotal_fee('1');

    $result = WxPayApi::unifiedOrder($wxparams);

    // return $result['notify_url'];
    return $result['mweb_url'];
}

function commerce_wechatpayh5_orderQuery($out_trade_no) {
    require_once "lib/WxPay.Api.php";
    $wxparams = new WxPayOrderQuery();

    // $wxparams->SetTransaction_id($out_trade_no);
    $wxparams->SetOut_trade_no($out_trade_no);

    $result = WxPayApi::orderQuery($wxparams);

    return $result;
}

function commerce_wechatpayh5_closeOrder($out_trade_no) {
    require_once "lib/WxPay.Api.php";
    $wxparams = new WxPayCloseOrder();

    $wxparams->SetOut_trade_no($out_trade_no);

    $result = WxPayApi::closeOrder($wxparams);

    return $result;
}

function commerce_wechatpayh5_refund($out_trade_no, $out_refund_no, $total_fee, $refund_fee, $op_user_id) {
    require_once "lib/WxPay.Api.php";
    $wxparams = new WxPayRefund();

    //Choose between transaction_id and out_trade_no
    // $wxparams->SetTransaction_id($out_trade_no)
    $wxparams->SetOut_trade_no($out_trade_no);
    $wxparams->SetOut_refund_no($out_refund_no);
    $wxparams->SetTotal_fee($total_fee);
    $wxparams->SetRefund_fee($refund_fee);
    $wxparams->SetOp_user_id($op_user_id);

    $result = WxPayApi::refund($wxparams);

    return $result;
}

function commerce_wechatpayh5_refundQuery($out_trade_no) {
    require_once "lib/WxPay.Api.php";
    $wxparams = new WxPayRefundQuery();

    //Choose between transaction_id, out_trade_no, out_refund_no and refund_id
    // $wxparams->SetTransaction_id($out_trade_no);
    $wxparams->SetOut_trade_no($out_trade_no);
    // $wxparams->SetOut_refund_no($out_trade_no);
    // $wxparams->SetRefund_id($out_trade_no);

    $result = WxPayApi::refundQuery($wxparams);

    return $result;
}

function commerce_wechatpayh5_downloadBill($bill_date) {
    require_once "lib/WxPay.Api.php";
    $wxparams = new WxPayDownloadBill();

    $wxparams->SetBill_date($bill_date);

    $result = WxPayApi::downloadBill($wxparams);

    return $result;
}

// function commerce_wechatpayh5_micropay() {
//     $wxparams = new WxPayWxPayMicroPay();

//     $result = WxPayApi::micropay($wxparams);
// }

// function commerce_wechatpayh5_reverse() {
//     $wxparams = new WxPayReverse();

//     $result = WxPayApi::reverse($wxparams);
// }

function commerce_wechatpayh5_report($sub_mch_id, $interface_url, $execute_time, $return_code, $result_code) {
    require_once "lib/WxPay.Api.php";
    $wxparams = new WxPayReport();

    $wxparams->SetSub_mch_id($sub_mch_id);
    $wxparams->SetInterface_url($interface_url);
    $wxparams->SetExecute_time($execute_time);
    $wxparams->SetReturn_code($return_code);
    $wxparams->SetResult_code($result_code);

    $result = WxPayApi::report($wxparams);

    return $result;
}